diff --git a/node_modules/react-sound/lib/index.js b/node_modules/react-sound/lib/index.js
index cb4696e..de84a71 100644
--- a/node_modules/react-sound/lib/index.js
+++ b/node_modules/react-sound/lib/index.js
@@ -69,6 +69,8 @@ function _createSound(options, cb) {
 
 function noop() {}
 
+var fadeInCheck = false;
+
 var playStatuses = {
   PLAYING: 'PLAYING',
   STOPPED: 'STOPPED',
@@ -96,7 +98,24 @@ var Sound = function (_React$Component) {
   }, {
     key: 'componentWillUnmount',
     value: function componentWillUnmount() {
-      this.removeSound();
+
+      var fadeOutWillUnmount = setInterval(() => {
+        this.sound.setVolume(this.sound.volume - 10);
+        if (this.sound.volume <= 0) clearInterval(fadeOutWillUnmount);
+      }, 50);
+
+      function timeout(ms) {
+        return new Promise(resolve => setTimeout(resolve, ms));
+      }
+
+      async function asyncFadeout(that) {
+        await timeout(1000);
+        clearInterval(fadeOutWillUnmount);
+
+        that.removeSound();
+      }
+
+      asyncFadeout(this)
     }
   }, {
     key: 'componentDidUpdate',
@@ -104,9 +123,27 @@ var Sound = function (_React$Component) {
       var _this3 = this;
 
       if (this.props.url !== prevProps.url) {
-        this.createSound(function (sound) {
-          return _this3.updateSound(sound, prevProps);
-        });
+
+        var fadeOutDidUpdate = setInterval(() => {
+          this.sound.setVolume(this.sound.volume - 10);
+          if (this.sound.volume <= 0) clearInterval(fadeOutDidUpdate);
+        }, 50);
+
+        function timeout(ms) {
+          return new Promise(resolve => setTimeout(resolve, ms));
+        }
+
+        async function asyncFadeout(that) {
+          await timeout(1000);
+          clearInterval(fadeOutDidUpdate);
+
+          
+          that.createSound(function (sound) {  
+            return _this3.updateSound(sound, prevProps);
+          });
+        }
+
+        asyncFadeout(this)        
       } else {
         this.updateSound(this.sound);
       }
@@ -114,15 +151,44 @@ var Sound = function (_React$Component) {
   }, {
     key: 'updateSound',
     value: function updateSound(sound) {
-      var prevProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
 
-      if (!sound) {
-        return;
-      }
+      if (!sound || sound.volume < 0) return;
+
+      let count = 0
+      let volumeCache
+
+      var logging = setInterval(() => {
+
+        if (sound.volume === volumeCache) {
+          if (count === 10) clearInterval(logging)
+          count++
+        } else {
+          volumeCache = sound.volume
+          count = 0
+        }
+      }, 100);
+
+      if (sound.volume > 150) clearInterval(logging)
+      
+      var prevProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
 
       if (this.props.playStatus === playStatuses.PLAYING) {
+
         if (sound.playState === 0) {
+          let originalVolume = sound.volume
+
           sound.play();
+
+          fadeInCheck = true
+
+          sound.setVolume(0);
+          var fadeIn = setInterval(() => {
+            if (sound.volume < 0 || sound.volume > 100 || sound.volume > originalVolume) sound.setVolume(0);
+
+            sound.setVolume(sound.volume + 1);
+
+            if (sound.volume === originalVolume) {clearInterval(fadeIn); fadeInCheck = false}
+          }, 10);
         }
 
         if (sound.paused) {
@@ -152,7 +218,7 @@ var Sound = function (_React$Component) {
         }
       }
 
-      if (this.props.volume !== prevProps.volume) {
+      if (this.props.volume !== prevProps.volume && !fadeInCheck) {
         sound.setVolume(this.props.volume);
       }
 
@@ -224,6 +290,8 @@ var Sound = function (_React$Component) {
       }
 
       if (this.sound) {
+        console.log('УНИЧТОЖЕНИЕ МЕЛОДИИ, БДЫЩЬ БДЫЩЬ11 this.sound', this.sound.id)
+
         try {
           this.sound.destruct();
         } catch (e) {} // eslint-disable-line
